rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check file size
    function isValidFileSize(maxSizeInMB) {
      return request.resource.size <= maxSizeInMB * 1024 * 1024;
    }
    
    // Helper function to check image file type
    function isImage() {
      return request.resource.contentType.matches('image/.*');
    }
    
    // Helper function to check document file type
    function isDocument() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.*');
    }
    
    // User profile images
    match /users/{userId}/profile/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   isValidFileSize(5) && // 5MB max
                   isImage();
    }
    
    // User resumes and documents
    match /users/{userId}/documents/{document} {
      allow read: if request.auth != null && 
                  (request.auth.uid == userId ||
                   request.auth.token.role in ['admin', 'ella_recruiter', 'recruiter']);
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   isValidFileSize(10) && // 10MB max
                   isDocument();
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Company logos and branding
    match /companies/{companyId}/branding/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   request.auth.token.companyId == companyId &&
                   request.auth.token.role in ['admin', 'company_admin'] &&
                   isValidFileSize(5) && // 5MB max
                   isImage();
    }
    
    // Company documents (policies, handbooks, etc.)
    match /companies/{companyId}/documents/{document} {
      allow read: if request.auth != null && 
                  (request.auth.token.companyId == companyId ||
                   request.auth.token.role in ['admin', 'ella_recruiter']);
      allow write: if request.auth != null && 
                   request.auth.token.companyId == companyId &&
                   request.auth.token.role in ['admin', 'company_admin'] &&
                   isValidFileSize(20) && // 20MB max
                   isDocument();
    }
    
    // Assessment resources (images, documents for questions)
    match /assessments/{assessmentId}/resources/{resource} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   request.auth.token.role in ['admin', 'recruiter', 'company_admin'] &&
                   isValidFileSize(10); // 10MB max
    }
    
    // Assessment submissions (candidate work)
    match /assessment-attempts/{attemptId}/submissions/{submission} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.metadata['candidateId'] ||
                   request.auth.token.role in ['admin', 'ella_recruiter', 'recruiter']);
      allow write: if request.auth != null && 
                   request.auth.uid == request.resource.metadata['candidateId'] &&
                   isValidFileSize(50); // 50MB max for code/project submissions
      allow delete: if false; // Submissions should never be deleted
    }
    
    // Temporary upload area (for processing)
    match /temp/{userId}/{allPaths=**} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   isValidFileSize(100); // 100MB max for temp files
      // Auto-cleanup: Files in temp should be deleted after processing
      allow delete: if request.auth != null && 
                    (request.auth.uid == userId ||
                     request.auth.token.role == 'admin');
    }
    
    // System resources (platform assets, templates)
    match /system/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   request.auth.token.role == 'admin';
    }
    
    // Data exports (for GDPR compliance)
    match /exports/{userId}/{exportId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == userId ||
                   request.auth.token.role == 'admin');
      allow write: if request.auth != null && 
                   request.auth.token.role == 'admin';
      // Exports should be deleted after download or expiry
      allow delete: if request.auth != null && 
                    request.auth.token.role == 'admin';
    }
    
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}