/**\n * Critical Smoke Tests for EllaAI Assessment Platform\n * \n * These tests verify that the most critical functionality works\n * after deployment to staging or production environments.\n */\n\nimport { describe, test, expect, beforeAll, afterAll } from '@jest/globals';\n\nconst BASE_URL = process.env.PROD_URL || process.env.STAGING_URL || 'https://ellaai-platform-staging.web.app';\nconst API_URL = BASE_URL.replace('.web.app', '.cloudfunctions.net').replace('https://', 'https://us-central1-').replace('.com', '.com/api');\n\n// Simple HTTP client for testing\nconst httpGet = async (url: string): Promise<Response> => {\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'User-Agent': 'EllaAI-SmokeTest/1.0',\n      'Accept': 'application/json',\n    },\n  });\n  return response;\n};\n\nconst httpPost = async (url: string, data: any): Promise<Response> => {\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'User-Agent': 'EllaAI-SmokeTest/1.0',\n    },\n    body: JSON.stringify(data),\n  });\n  return response;\n};\n\ndescribe('🚨 Critical Smoke Tests', () => {\n  beforeAll(() => {\n    console.log(`🔍 Running smoke tests against: ${BASE_URL}`);\n    console.log(`📡 API endpoint: ${API_URL}`);\n  });\n\n  afterAll(() => {\n    console.log('✅ Smoke tests completed');\n  });\n\n  describe('🌐 Website Availability', () => {\n    test('critical: main website should be accessible', async () => {\n      const response = await httpGet(BASE_URL);\n      expect(response.status).toBe(200);\n      \n      const contentType = response.headers.get('content-type');\n      expect(contentType).toContain('text/html');\n      \n      const text = await response.text();\n      expect(text).toContain('EllaAI');\n    }, 30000);\n\n    test('critical: login page should load', async () => {\n      const response = await httpGet(`${BASE_URL}/login`);\n      expect(response.status).toBe(200);\n    }, 15000);\n\n    test('critical: dashboard should be protected', async () => {\n      const response = await httpGet(`${BASE_URL}/dashboard`);\n      // Should redirect to login or return 401/403\n      expect([200, 302, 401, 403]).toContain(response.status);\n    }, 15000);\n  });\n\n  describe('🔌 API Health', () => {\n    test('critical: API health endpoint should respond', async () => {\n      const response = await httpGet(`${API_URL}/health`);\n      expect([200, 404]).toContain(response.status); // 404 is acceptable if endpoint doesn't exist\n    }, 15000);\n\n    test('critical: API should handle CORS', async () => {\n      const response = await fetch(`${API_URL}/health`, {\n        method: 'OPTIONS',\n        headers: {\n          'Origin': BASE_URL,\n          'Access-Control-Request-Method': 'GET',\n        },\n      });\n      // Should allow CORS or return 200\n      expect([200, 204, 404]).toContain(response.status);\n    }, 10000);\n  });\n\n  describe('🔒 Security Headers', () => {\n    test('critical: should have security headers', async () => {\n      const response = await httpGet(BASE_URL);\n      \n      // Check for basic security headers\n      const headers = response.headers;\n      \n      // Content Security Policy\n      expect(\n        headers.has('content-security-policy') || \n        headers.has('x-content-type-options')\n      ).toBe(true);\n      \n      // Should not expose sensitive information\n      expect(headers.get('server')).not.toContain('Express');\n      expect(headers.get('x-powered-by')).toBeFalsy();\n    }, 10000);\n\n    test('critical: should enforce HTTPS', async () => {\n      expect(BASE_URL).toMatch(/^https:/);\n    });\n  });\n\n  describe('📱 Core Functionality', () => {\n    test('critical: static assets should load', async () => {\n      // Try to load the main page and check for CSS/JS references\n      const response = await httpGet(BASE_URL);\n      const html = await response.text();\n      \n      // Look for asset references\n      const hasCSS = html.includes('.css') || html.includes('stylesheet');\n      const hasJS = html.includes('.js') || html.includes('script');\n      \n      expect(hasCSS || hasJS).toBe(true);\n    }, 15000);\n\n    test('critical: should handle 404 gracefully', async () => {\n      const response = await httpGet(`${BASE_URL}/non-existent-page`);\n      // Should return 404 or redirect to a valid page\n      expect([200, 404]).toContain(response.status);\n    }, 10000);\n  });\n\n  describe('⚡ Performance Basics', () => {\n    test('critical: main page should load within 10 seconds', async () => {\n      const startTime = Date.now();\n      const response = await httpGet(BASE_URL);\n      const loadTime = Date.now() - startTime;\n      \n      expect(response.status).toBe(200);\n      expect(loadTime).toBeLessThan(10000); // 10 seconds max\n      \n      console.log(`📊 Page load time: ${loadTime}ms`);\n    }, 15000);\n\n    test('critical: response should be reasonably sized', async () => {\n      const response = await httpGet(BASE_URL);\n      const html = await response.text();\n      \n      // Main page should not be excessively large\n      expect(html.length).toBeLessThan(2_000_000); // 2MB max\n      \n      console.log(`📦 Page size: ${(html.length / 1024).toFixed(2)}KB`);\n    }, 15000);\n  });\n\n  describe('🔄 API Basic Functionality', () => {\n    test('critical: API should reject malformed requests', async () => {\n      const response = await httpPost(`${API_URL}/auth/login`, {\n        invalid: 'data'\n      });\n      \n      // Should return 400, 401, 404, or 422 for bad request\n      expect([400, 401, 404, 422, 500]).toContain(response.status);\n    }, 10000);\n\n    test('critical: API should handle large payloads', async () => {\n      const largePayload = {\n        data: 'x'.repeat(1000) // 1KB payload\n      };\n      \n      const response = await httpPost(`${API_URL}/test`, largePayload);\n      \n      // Should handle request (even if endpoint doesn't exist)\n      expect(response.status).toBeLessThan(500);\n    }, 10000);\n  });\n\n  describe('🧪 Environment Validation', () => {\n    test('critical: should be running correct environment', async () => {\n      // Basic environment checks\n      console.log(`🌍 Testing environment: ${BASE_URL}`);\n      \n      if (BASE_URL.includes('staging')) {\n        console.log('📍 Environment: Staging');\n      } else if (BASE_URL.includes('prod')) {\n        console.log('📍 Environment: Production');\n      } else {\n        console.log('📍 Environment: Unknown/Local');\n      }\n      \n      // Environment should be accessible\n      const response = await httpGet(BASE_URL);\n      expect(response.status).toBe(200);\n    });\n\n    test('critical: should not expose debug information', async () => {\n      const response = await httpGet(BASE_URL);\n      const html = await response.text();\n      \n      // Should not contain debug information in production\n      if (BASE_URL.includes('prod')) {\n        expect(html.toLowerCase()).not.toContain('debug');\n        expect(html.toLowerCase()).not.toContain('development');\n        expect(html.toLowerCase()).not.toContain('localhost');\n      }\n    });\n  });\n});\n\n/**\n * Utility function to run a quick overall health check\n */\nexport const runQuickHealthCheck = async (): Promise<boolean> => {\n  try {\n    console.log('🏥 Running quick health check...');\n    \n    // Test main site\n    const siteResponse = await httpGet(BASE_URL);\n    if (siteResponse.status !== 200) {\n      console.error(`❌ Site check failed: ${siteResponse.status}`);\n      return false;\n    }\n    \n    // Test API (if available)\n    try {\n      const apiResponse = await httpGet(`${API_URL}/health`);\n      console.log(`📡 API status: ${apiResponse.status}`);\n    } catch (error) {\n      console.log('⚠️ API health check skipped (endpoint may not exist)');\n    }\n    \n    console.log('✅ Quick health check passed');\n    return true;\n  } catch (error) {\n    console.error('❌ Quick health check failed:', error);\n    return false;\n  }\n};\n\n// Export for use in deployment scripts\nif (require.main === module) {\n  runQuickHealthCheck().then(success => {\n    process.exit(success ? 0 : 1);\n  });\n}\n"