name: 🔄 Continuous Integration

on:
  push:
    branches: [main, develop, 'release/**', 'feature/**']
  pull_request:
    branches: [main, develop]
  merge_group:

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'ellaai-v1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: 🚀 Setup
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      should-run-e2e: ${{ steps.changes.outputs.e2e }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            functions/package-lock.json
            tests/package-lock.json

      - name: 🏗️ Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            functions:
              - 'functions/**'
            tests:
              - 'tests/**'
            e2e:
              - 'frontend/**'
              - 'functions/**'
              - 'tests/integration/**'

  lint-and-typecheck:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix:
        workspace: [frontend, functions, tests]
      fail-fast: false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            ${{ matrix.workspace }}/package-lock.json

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd ${{ matrix.workspace }} && npm ci

      - name: 🔍 Run ESLint
        run: cd ${{ matrix.workspace }} && npm run lint

      - name: 🔧 Run TypeScript check
        run: |
          if [ "${{ matrix.workspace }}" = "frontend" ]; then
            cd frontend && npm run build
          elif [ "${{ matrix.workspace }}" = "functions" ]; then
            cd functions && npm run build
          else
            cd tests && npm run typecheck
          fi

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix:
        workspace: [frontend, functions]
      fail-fast: false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd ${{ matrix.workspace }} && npm ci

      - name: 🧪 Run tests with coverage
        run: |
          if [ "${{ matrix.workspace }}" = "frontend" ]; then
            cd frontend && npm run test:coverage
          else
            cd functions && npm run test
          fi

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}
          name: ${{ matrix.workspace }}-coverage
          fail_ci_if_error: false

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, lint-and-typecheck]
    if: needs.setup.outputs.should-run-e2e == 'true'
    services:
      firebase-emulator:
        image: andreysenov/firebase-tools:latest
        ports:
          - 4000:4000
          - 5000:5000
          - 8080:8080
          - 9000:9000
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../functions && npm ci
          cd ../tests && npm ci

      - name: 🏗️ Build applications
        run: |
          cd frontend && npm run build
          cd ../functions && npm run build

      - name: 🔥 Start Firebase emulators
        run: |
          npm install -g firebase-tools
          firebase emulators:start --detached
        env:
          FIREBASE_PROJECT_ID: ellaai-test

      - name: 🧪 Run integration tests
        run: cd tests && npm run test:integration
        env:
          FIREBASE_EMULATOR_HOST: localhost

      - name: 🛑 Stop emulators
        run: firebase emulators:stop
        if: always()

  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../functions && npm ci
          cd ../tests && npm ci

      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level=moderate --production
          cd frontend && npm audit --audit-level=moderate --production
          cd ../functions && npm audit --audit-level=moderate --production
        continue-on-error: true

      - name: 🔒 Run security tests
        run: cd tests && npm run test:security

      - name: 📋 Generate security report
        run: |
          echo "## Security Audit Report" > security-report.md
          echo "Generated at: $(date)" >> security-report.md
          echo "" >> security-report.md
          npm audit --json --production | jq -r '.vulnerabilities | to_entries[] | "- \(.key): \(.value.severity)"' >> security-report.md

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    strategy:
      matrix:
        workspace: [frontend, functions]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd ${{ matrix.workspace }} && npm ci

      - name: 🏗️ Build ${{ matrix.workspace }}
        run: cd ${{ matrix.workspace }} && npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.workspace }}
          path: |
            ${{ matrix.workspace }}/dist
            ${{ matrix.workspace }}/lib
          retention-days: 7

  quality-gate:
    name: 🚦 Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, integration-tests, security-tests, build]
    if: always()
    steps:
      - name: 🔍 Check all jobs status
        run: |
          echo "Lint & TypeCheck: ${{ needs.lint-and-typecheck.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint-and-typecheck.result }}" != "success" ]] || 
             [[ "${{ needs.unit-tests.result }}" != "success" ]] || 
             [[ "${{ needs.security-tests.result }}" != "success" ]] || 
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Quality gate failed!"
            exit 1
          fi
          
          # Integration tests can be skipped if no changes
          if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "❌ Integration tests failed!"
            exit 1
          fi
          
          echo "✅ Quality gate passed!"

      - name: 📊 Generate CI summary
        run: |
          echo "## 🎯 CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & TypeCheck | ${{ needs.lint-and-typecheck.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || needs.integration-tests.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY