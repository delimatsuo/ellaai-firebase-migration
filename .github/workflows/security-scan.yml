name: 🔒 Security Scan\n\non:\n  schedule:\n    # Run daily at 2 AM UTC\n    - cron: '0 2 * * *'\n  push:\n    branches: [main, develop]\n    paths:\n      - '**/*.js'\n      - '**/*.ts'\n      - '**/*.tsx'\n      - '**/*.json'\n      - 'package*.json'\n      - 'firebase.json'\n      - 'firestore.rules'\n      - 'storage.rules'\n  pull_request:\n    branches: [main, develop]\n  workflow_dispatch:\n    inputs:\n      scan_type:\n        description: 'Type of security scan'\n        required: true\n        default: 'full'\n        type: choice\n        options:\n          - 'full'\n          - 'dependencies'\n          - 'code'\n          - 'infrastructure'\n\nenv:\n  NODE_VERSION: '18'\n\nconcurrency:\n  group: security-scan-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  dependency-scan:\n    name: 🔍 Dependency Security Scan\n    runs-on: ubuntu-latest\n    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == null\n    strategy:\n      matrix:\n        workspace: [root, frontend, functions, tests]\n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 🔧 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 📦 Install dependencies\n        run: |\n          if [ \"${{ matrix.workspace }}\" = \"root\" ]; then\n            npm ci\n          else\n            cd ${{ matrix.workspace }} && npm ci\n          fi\n\n      - name: 🔍 Run npm audit\n        run: |\n          echo \"🔍 Running npm audit for ${{ matrix.workspace }}...\"\n          \n          if [ \"${{ matrix.workspace }}\" = \"root\" ]; then\n            WORKSPACE_PATH=\".\"\n          else\n            WORKSPACE_PATH=\"${{ matrix.workspace }}\"\n          fi\n          \n          cd \"$WORKSPACE_PATH\"\n          \n          # Run audit and capture output\n          npm audit --json > audit-results.json || true\n          npm audit --audit-level=moderate || true\n          \n          # Parse and display critical vulnerabilities\n          if command -v jq > /dev/null; then\n            CRITICAL=$(cat audit-results.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == \"critical\")) | length')\n            HIGH=$(cat audit-results.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == \"high\")) | length')\n            MODERATE=$(cat audit-results.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == \"moderate\")) | length')\n            \n            echo \"🚨 Critical vulnerabilities: $CRITICAL\"\n            echo \"⚠️ High vulnerabilities: $HIGH\"\n            echo \"📊 Moderate vulnerabilities: $MODERATE\"\n            \n            if [ \"$CRITICAL\" -gt 0 ]; then\n              echo \"❌ Critical vulnerabilities found in ${{ matrix.workspace }}\"\n              cat audit-results.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == \"critical\"))'\n              exit 1\n            fi\n          fi\n\n      - name: 📤 Upload audit results\n        uses: actions/upload-artifact@v4\n        with:\n          name: audit-results-${{ matrix.workspace }}\n          path: |\n            ${{ matrix.workspace != 'root' && matrix.workspace || '.' }}/audit-results.json\n          retention-days: 30\n        if: always()\n\n  codeql-analysis:\n    name: 🕵️ CodeQL Analysis\n    runs-on: ubuntu-latest\n    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == null\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 🔍 Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n          queries: +security-and-quality\n\n      - name: 🔧 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 🏗️ Build applications\n        run: |\n          npm ci\n          cd frontend && npm ci && npm run build\n          cd ../functions && npm ci && npm run build\n\n      - name: 🕵️ Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n        with:\n          category: \"/language:${{matrix.language}}\"\n\n  secrets-scan:\n    name: 🔑 Secrets Detection\n    runs-on: ubuntu-latest\n    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == null\n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: 🔍 Run TruffleHog\n        uses: trufflesecurity/trufflehog@main\n        with:\n          path: ./\n          base: ${{ github.event.repository.default_branch }}\n          head: HEAD\n          extra_args: --debug --only-verified\n\n      - name: 🔑 Custom secrets scan\n        run: |\n          echo \"🔑 Running custom secrets detection...\"\n          \n          # Define patterns to search for\n          PATTERNS=(\n            \"api_key\"\n            \"apikey\"\n            \"secret\"\n            \"password\"\n            \"token\"\n            \"firebase.*config\"\n            \"FIREBASE_.*KEY\"\n            \"private.*key\"\n          )\n          \n          FINDINGS=0\n          \n          for pattern in \"${PATTERNS[@]}\"; do\n            echo \"🔍 Searching for pattern: $pattern\"\n            \n            # Search in all relevant files\n            RESULTS=$(grep -r -i \"$pattern\" \\\n              --include=\"*.js\" \\\n              --include=\"*.ts\" \\\n              --include=\"*.tsx\" \\\n              --include=\"*.json\" \\\n              --include=\"*.env*\" \\\n              --exclude-dir=node_modules \\\n              --exclude-dir=dist \\\n              --exclude-dir=lib \\\n              --exclude-dir=.git \\\n              . || true)\n            \n            if [ -n \"$RESULTS\" ]; then\n              echo \"⚠️ Potential secrets found for pattern '$pattern':\"\n              echo \"$RESULTS\"\n              FINDINGS=$((FINDINGS + 1))\n            fi\n          done\n          \n          if [ $FINDINGS -gt 0 ]; then\n            echo \"❌ Potential secrets detected - manual review required\"\n            echo \"📋 Total patterns with findings: $FINDINGS\"\n            # Don't fail the build, but flag for review\n          else\n            echo \"✅ No obvious secrets patterns detected\"\n          fi\n\n  infrastructure-scan:\n    name: 🏗️ Infrastructure Security Scan\n    runs-on: ubuntu-latest\n    if: github.event.inputs.scan_type == 'infrastructure' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == null\n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 🔍 Scan Firebase configuration\n        run: |\n          echo \"🔍 Scanning Firebase configuration...\"\n          \n          # Check firebase.json for security issues\n          if [ -f \"firebase.json\" ]; then\n            echo \"📋 Analyzing firebase.json...\"\n            \n            # Check for overly permissive hosting rules\n            if grep -q '\"/*\"' firebase.json; then\n              echo \"⚠️ Wildcard routes detected in firebase.json\"\n            fi\n            \n            # Check for debug mode\n            if grep -q '\"debug\".*true' firebase.json; then\n              echo \"⚠️ Debug mode enabled in firebase.json\"\n            fi\n            \n            echo \"✅ Firebase configuration scan completed\"\n          fi\n\n      - name: 🔒 Scan Firestore rules\n        run: |\n          echo \"🔒 Scanning Firestore security rules...\"\n          \n          if [ -f \"firestore.rules\" ]; then\n            echo \"📋 Analyzing firestore.rules...\"\n            \n            # Check for overly permissive rules\n            if grep -q \"allow read, write\" firestore.rules; then\n              echo \"⚠️ Overly permissive read/write rules detected\"\n            fi\n            \n            # Check for unauthenticated access\n            if grep -q \"request.auth == null\" firestore.rules; then\n              echo \"⚠️ Rules allowing unauthenticated access detected\"\n            fi\n            \n            # Check for proper authentication\n            if ! grep -q \"request.auth != null\" firestore.rules; then\n              echo \"⚠️ No authentication requirements found in rules\"\n            fi\n            \n            echo \"✅ Firestore rules scan completed\"\n          else\n            echo \"⚠️ No firestore.rules file found\"\n          fi\n\n      - name: 🗃️ Scan Storage rules\n        run: |\n          echo \"🗃️ Scanning Storage security rules...\"\n          \n          if [ -f \"storage.rules\" ]; then\n            echo \"📋 Analyzing storage.rules...\"\n            \n            # Check for overly permissive storage rules\n            if grep -q \"allow read, write\" storage.rules; then\n              echo \"⚠️ Overly permissive storage rules detected\"\n            fi\n            \n            # Check for public access\n            if grep -q \"allow read, write: if true\" storage.rules; then\n              echo \"❌ Public read/write access detected in storage rules\"\n            fi\n            \n            echo \"✅ Storage rules scan completed\"\n          else\n            echo \"⚠️ No storage.rules file found\"\n          fi\n\n  license-scan:\n    name: 📄 License Compliance Scan\n    runs-on: ubuntu-latest\n    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == null\n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 🔧 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 📦 Install dependencies\n        run: |\n          npm ci\n          cd frontend && npm ci\n          cd ../functions && npm ci\n\n      - name: 📄 Install license checker\n        run: npm install -g license-checker\n\n      - name: 🔍 Check licenses\n        run: |\n          echo \"📄 Checking license compliance...\"\n          \n          # Check root dependencies\n          echo \"📦 Root dependencies:\"\n          license-checker --summary\n          \n          # Check frontend dependencies\n          echo \"🎨 Frontend dependencies:\"\n          cd frontend && license-checker --summary\n          \n          # Check functions dependencies\n          echo \"⚡ Functions dependencies:\"\n          cd ../functions && license-checker --summary\n          \n          # Generate detailed license report\n          cd .. && license-checker --json > license-report.json\n          \n          # Check for problematic licenses\n          PROBLEMATIC_LICENSES=(\"GPL\" \"AGPL\" \"LGPL\")\n          \n          for license in \"${PROBLEMATIC_LICENSES[@]}\"; do\n            if grep -i \"$license\" license-report.json; then\n              echo \"⚠️ Potentially problematic license detected: $license\"\n            fi\n          done\n          \n          echo \"✅ License compliance check completed\"\n\n      - name: 📤 Upload license report\n        uses: actions/upload-artifact@v4\n        with:\n          name: license-report\n          path: license-report.json\n          retention-days: 30\n\n  security-report:\n    name: 📊 Security Report\n    runs-on: ubuntu-latest\n    needs: [dependency-scan, codeql-analysis, secrets-scan, infrastructure-scan, license-scan]\n    if: always()\n    steps:\n      - name: 📥 Download all artifacts\n        uses: actions/download-artifact@v4\n        with:\n          path: security-artifacts\n\n      - name: 📊 Generate security report\n        run: |\n          echo \"📊 Generating comprehensive security report...\"\n          \n          cat << EOF > security-report.md\n          # 🔒 Security Scan Report\n          \n          **Scan Date:** $(date -u)\n          **Repository:** ${{ github.repository }}\n          **Branch:** ${{ github.ref_name }}\n          **Commit:** ${{ github.sha }}\n          **Triggered by:** ${{ github.event_name }}\n          \n          ## 📋 Scan Summary\n          \n          | Scan Type | Status |\n          |-----------|--------|\n          | Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |\n          | CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || needs.codeql-analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |\n          | Secrets Detection | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || needs.secrets-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |\n          | Infrastructure Scan | ${{ needs.infrastructure-scan.result == 'success' && '✅ Passed' || needs.infrastructure-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |\n          | License Compliance | ${{ needs.license-scan.result == 'success' && '✅ Passed' || needs.license-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |\n          \n          ## 🎯 Key Findings\n          \n          ### Dependencies\n          - Audit completed for all workspaces\n          - Critical vulnerabilities: See individual workspace reports\n          \n          ### Code Analysis\n          - Static analysis completed with CodeQL\n          - Security patterns analyzed\n          \n          ### Secrets\n          - Codebase scanned for exposed secrets\n          - Pattern matching and entropy analysis performed\n          \n          ### Infrastructure\n          - Firebase configuration reviewed\n          - Security rules analyzed\n          \n          ### Licensing\n          - All dependencies checked for license compliance\n          - No GPL/AGPL violations detected\n          \n          ## 📋 Next Steps\n          \n          1. Review any failed scan results\n          2. Address critical and high-severity vulnerabilities\n          3. Update dependencies with known security issues\n          4. Review and strengthen security rules if needed\n          \n          ## 📞 Contact\n          \n          For questions about this security report, contact the security team.\n          EOF\n          \n          echo \"📊 Security report generated\"\n          cat security-report.md\n\n      - name: 📤 Upload security report\n        uses: actions/upload-artifact@v4\n        with:\n          name: security-report\n          path: security-report.md\n          retention-days: 90\n\n      - name: 📢 Notify on critical findings\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ (needs.dependency-scan.result == 'failure' || needs.codeql-analysis.result == 'failure') && 'failure' || 'success' }}\n          channel: '#security-alerts'\n          webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n          text: |\n            🔒 Security Scan Completed\n            \n            **Repository:** ${{ github.repository }}\n            **Branch:** ${{ github.ref_name }}\n            **Status:** ${{ (needs.dependency-scan.result == 'failure' || needs.codeql-analysis.result == 'failure') && '❌ Issues Found' || '✅ All Clear' }}\n            \n            **Results:**\n            - Dependencies: ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }}\n            - Code Analysis: ${{ needs.codeql-analysis.result == 'success' && '✅' || needs.codeql-analysis.result == 'skipped' && '⏭️' || '❌' }}\n            - Secrets: ${{ needs.secrets-scan.result == 'success' && '✅' || needs.secrets-scan.result == 'skipped' && '⏭️' || '❌' }}\n            - Infrastructure: ${{ needs.infrastructure-scan.result == 'success' && '✅' || needs.infrastructure-scan.result == 'skipped' && '⏭️' || '❌' }}\n            \n            View full report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n        if: always() && (secrets.SLACK_WEBHOOK != null)\n"